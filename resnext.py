{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled2.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNU1poupxQCyHzPG9WdQD1l",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dinoair/GAN/blob/master/resnext.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yIQ6-POsPSr1"
      },
      "source": [
        "import math\n",
        "\n",
        "import torch.nn as nn\n",
        "\n",
        "__all__ = ['ResNeXt', 'resnext50', 'resnext101', 'resnext101_64', 'resnext152']\n",
        "\n",
        "\n",
        "class Bottleneck(nn.Module):\n",
        "    \"\"\"\n",
        "    RexNeXt bottleneck type C\n",
        "    \"\"\"\n",
        "    expansion = 4\n",
        "\n",
        "    def __init__(self, inplanes, planes, baseWidth, cardinality, stride=1, downsample=None):\n",
        "        super(Bottleneck, self).__init__()\n",
        "\n",
        "        D = int(math.floor(planes * (baseWidth / 64)))\n",
        "        C = cardinality\n",
        "\n",
        "        self.conv1 = nn.Conv2d(inplanes, D * C, kernel_size=1, bias=False)\n",
        "        self.bn1 = nn.BatchNorm2d(D * C)\n",
        "        self.conv2 = nn.Conv2d(D * C, D * C, kernel_size=3, stride=stride,\n",
        "                               padding=1, groups=C, bias=False)\n",
        "        self.bn2 = nn.BatchNorm2d(D * C)\n",
        "        self.conv3 = nn.Conv2d(D * C, planes * self.expansion, kernel_size=1, bias=False)\n",
        "        self.bn3 = nn.BatchNorm2d(planes * self.expansion)\n",
        "        self.relu = nn.ReLU(inplace=True)\n",
        "\n",
        "        self.downsample = downsample\n",
        "        self.stride = stride\n",
        "\n",
        "    def forward(self, x):\n",
        "        residual = x\n",
        "\n",
        "        out = self.conv1(x)\n",
        "        out = self.bn1(out)\n",
        "        out = self.relu(out)\n",
        "\n",
        "        out = self.conv2(out)\n",
        "        out = self.bn2(out)\n",
        "        out = self.relu(out)\n",
        "\n",
        "        out = self.conv3(out)\n",
        "        out = self.bn3(out)\n",
        "\n",
        "        if self.downsample is not None:\n",
        "            residual = self.downsample(x)\n",
        "\n",
        "        out += residual\n",
        "        out = self.relu(out)\n",
        "\n",
        "        return out\n",
        "\n",
        "\n",
        "class ResNeXt(nn.Module):\n",
        "\n",
        "    def __init__(self, block, baseWidth, cardinality, layers, num_classes):\n",
        "        super(ResNeXt, self).__init__()\n",
        "\n",
        "        self.cardinality = cardinality\n",
        "        self.baseWidth = baseWidth\n",
        "        self.num_classes = num_classes\n",
        "        self.inplanes = 64\n",
        "        self.output_size = 64\n",
        "\n",
        "        self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3,\n",
        "                               bias=False)\n",
        "        self.bn1 = nn.BatchNorm2d(64)\n",
        "        self.relu = nn.ReLU(inplace=True)\n",
        "        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\n",
        "        self.layer1 = self._make_layer(block, 64, layers[0])\n",
        "        self.layer2 = self._make_layer(block, 128, layers[1], stride=2)\n",
        "        self.layer3 = self._make_layer(block, 256, layers[2], stride=2)\n",
        "        self.layer4 = self._make_layer(block, 512, layers[3], stride=2)\n",
        "        self.avgpool = nn.AvgPool2d(7)\n",
        "        self.fc = nn.Linear(512 * block.expansion, num_classes)\n",
        "\n",
        "        for m in self.modules():\n",
        "            if isinstance(m, nn.Conv2d):\n",
        "                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n",
        "            elif isinstance(m, nn.BatchNorm2d):\n",
        "                nn.init.constant_(m.weight, 1)\n",
        "                nn.init.constant_(m.bias, 0)\n",
        "\n",
        "    def _make_layer(self, block, planes, blocks, stride=1):\n",
        "        downsample = None\n",
        "        if stride != 1 or self.inplanes != planes * block.expansion:\n",
        "            downsample = nn.Sequential(\n",
        "                nn.Conv2d(self.inplanes, planes * block.expansion,\n",
        "                          kernel_size=1, stride=stride, bias=False),\n",
        "                nn.BatchNorm2d(planes * block.expansion),\n",
        "            )\n",
        "\n",
        "        layers = []\n",
        "        layers.append(block(self.inplanes, planes, self.baseWidth,\n",
        "                            self.cardinality, stride, downsample))\n",
        "        self.inplanes = planes * block.expansion\n",
        "        for i in range(1, blocks):\n",
        "            layers.append(block(self.inplanes, planes,\n",
        "                                self.baseWidth, self.cardinality))\n",
        "\n",
        "        return nn.Sequential(*layers)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.conv1(x)\n",
        "        x = self.bn1(x)\n",
        "        x = self.relu(x)\n",
        "        x = self.maxpool(x)\n",
        "\n",
        "        x = self.layer1(x)\n",
        "        x = self.layer2(x)\n",
        "        x = self.layer3(x)\n",
        "        x = self.layer4(x)\n",
        "\n",
        "        x = self.avgpool(x)\n",
        "        x = x.view(x.size(0), -1)\n",
        "        x = self.fc(x)\n",
        "\n",
        "        return x\n",
        "\n",
        "\n",
        "def resnext50(num_classes=1000, **_kwargs):\n",
        "    \"\"\"Constructs a ResNeXt-50 model.\"\"\"\n",
        "    model = ResNeXt(Bottleneck, 4, 32, [3, 4, 6, 3], num_classes=num_classes)\n",
        "    return model\n",
        "\n",
        "\n",
        "def resnext101(num_classes=1000, **_kwargs):\n",
        "    \"\"\"Constructs a ResNeXt-101 (32x4d) model.\"\"\"\n",
        "    model = ResNeXt(Bottleneck, 4, 32, [3, 4, 23, 3], num_classes=num_classes)\n",
        "    return model\n",
        "\n",
        "\n",
        "def resnext101_64(num_classes=1000, **_kwargs):\n",
        "    \"\"\"Constructs a ResNeXt-101 (64x4d) model.\"\"\"\n",
        "    model = ResNeXt(Bottleneck, 4, 64, [3, 4, 23, 3], num_classes=num_classes)\n",
        "    return model\n",
        "\n",
        "\n",
        "def resnext152(num_classes=1000, **_kwargs):\n",
        "    \"\"\"Constructs a ResNeXt-152 (32x4d) model.\"\"\"\n",
        "    model = ResNeXt(Bottleneck, 4, 32, [3, 8, 36, 3], num_classes=num_classes)\n",
        "    return model"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}